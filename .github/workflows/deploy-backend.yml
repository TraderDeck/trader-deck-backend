name: Deploy Spring Boot to Backend EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Spring Boot JAR
        run: mvn clean package -DskipTests

      # Step 1: Upload JAR file to Bastion Host
      - name: Upload JAR to Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/*.jar"
          target: "/home/ec2-user/"

      # Step 2: SSH into Bastion and Copy JAR to Backend EC2, then Restart App
      - name: SSH into Bastion & Deploy to Backend EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            JAR_NAME=backend-0.0.1-SNAPSHOT.jar
            BACKEND_HOST=10.16.78.89
            REMOTE_HOME=/home/ec2-user
            REMOTE_JAR_PATH="$REMOTE_HOME/$JAR_NAME"
            
            echo "=== Starting deployment process ==="
            echo "Current time: $(date)"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            echo "=== Verifying JAR file exists on Bastion (multi-path search) ==="
            echo "Listing /home/ec2-user:"; ls -lah /home/ec2-user || true
            echo "Listing /home/ec2-user/target:"; ls -lah /home/ec2-user/target || true
            if [ -f "/home/ec2-user/$JAR_NAME" ]; then
              JAR_PATH_ON_BASTION="/home/ec2-user/$JAR_NAME"
            elif [ -f "/home/ec2-user/target/$JAR_NAME" ]; then
              JAR_PATH_ON_BASTION="/home/ec2-user/target/$JAR_NAME"
            else
              echo "Jar not in standard locations, running find..."
              JAR_PATH_ON_BASTION=$(find /home/ec2-user -maxdepth 4 -type f -name "$JAR_NAME" | head -1 || true)
            fi
            if [ -z "$JAR_PATH_ON_BASTION" ] || [ ! -f "$JAR_PATH_ON_BASTION" ]; then
              echo "ERROR: JAR file not found anywhere under /home/ec2-user"
              exit 1
            fi
            echo "SUCCESS: Found JAR at: $JAR_PATH_ON_BASTION"
            
            echo "=== Copying JAR to Backend EC2 ==="
            echo "Source: $JAR_PATH_ON_BASTION"
            echo "Destination: ec2-user@$BACKEND_HOST:$REMOTE_HOME/"
            scp -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem "$JAR_PATH_ON_BASTION" ec2-user@$BACKEND_HOST:"$REMOTE_HOME/"
            if [ $? -eq 0 ]; then
              echo "SUCCESS: JAR file copied to Backend EC2"
            else
              echo "ERROR: Failed to copy JAR file to Backend EC2"
              exit 1
            fi

            echo "=== Creating environment variables on Backend EC2 ==="
            # Build quoted env file on backend host using a safe heredoc (quotes preserved)
            ssh -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem ec2-user@$BACKEND_HOST 'bash -s' <<'EOSSH'
            set -euo pipefail
            # Write environment variables with single quotes so multi-line / special chars stay intact
            cat > /home/ec2-user/.env <<'EOF'
            DB_URL='${{ secrets.DB_URL }}'
            DB_USERNAME='${{ secrets.DB_USERNAME }}'
            DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            AWS_REGION='${{ secrets.AWS_REGION }}'
            AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            BEDROCK_FLOW_ID='${{ secrets.BEDROCK_FLOW_ID }}'
            BEDROCK_FLOW_ALIAS_ID='${{ secrets.BEDROCK_FLOW_ALIAS_ID }}'
            BEDROCK_MOCK_ENABLED='${{ secrets.BEDROCK_MOCK_ENABLED }}'
            EOF
            chmod 600 /home/ec2-user/.env
            echo 'Environment file created successfully'
            echo 'Contents (variable names only):'
            cut -d '=' -f1 /home/ec2-user/.env
            echo 'Verifying no blank lines:'
            nl -ba /home/ec2-user/.env
            EOSSH
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Environment variables created on Backend EC2"
            else
              echo "ERROR: Failed to create environment variables on Backend EC2"
              exit 1
            fi

            echo "=== Deploying to Backend EC2 ==="
            ssh -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem ec2-user@$BACKEND_HOST "JAR_NAME=$JAR_NAME REMOTE_HOME=$REMOTE_HOME REMOTE_JAR_PATH=$REMOTE_JAR_PATH" 'bash -s' <<'EOSSH'
            set -euo pipefail
            echo '=== Backend EC2 Deployment Start ==='
            echo "Current time: $(date)"
            echo "Using JAR: ${REMOTE_JAR_PATH}"

            echo '=== Stopping existing Spring Boot application ==='
            if pgrep -f "java -jar.*${JAR_NAME}" >/dev/null 2>&1; then
              EXISTING_PIDS=$(pgrep -f "java -jar.*${JAR_NAME}" | xargs)
              echo "Found running PIDs: $EXISTING_PIDS"
              pkill -f "java -jar.*${JAR_NAME}" || true
              sleep 3
              if pgrep -f "java -jar.*${JAR_NAME}" >/dev/null 2>&1; then
                echo 'Force killing remaining processes'
                pkill -9 -f "java -jar.*${JAR_NAME}" || true
              fi
            else
              echo 'No existing application running'
            fi

            echo '=== Loading environment variables ==='
            if [ ! -f "${REMOTE_HOME}/.env" ]; then
              echo 'ERROR: .env file missing'
              exit 1
            fi
            # shellcheck disable=SC2046,SC1090
            set -a
            . "${REMOTE_HOME}/.env"
            set +a
            echo "Loaded variables: $(grep '=' ${REMOTE_HOME}/.env | wc -l)"
            echo "DB_URL length: $(printf %s "${DB_URL}" | wc -c)"
            echo "DB_PASSWORD length: $(printf %s "${DB_PASSWORD}" | wc -c)"

            echo '=== Verifying JAR file ==='
            if [ ! -f "${REMOTE_JAR_PATH}" ]; then
              echo "ERROR: JAR not found at ${REMOTE_JAR_PATH}"
              ls -lah "${REMOTE_HOME}" || true
              exit 1
            fi
            ls -lah "${REMOTE_JAR_PATH}"

            echo '=== Starting new deployment ==='
            nohup java -jar "${REMOTE_JAR_PATH}" > app.log 2>&1 &
            APP_PID=$!
            echo "Started process PID: ${APP_PID}"

            echo '=== Waiting for application readiness (log + port) ==='
            ATTEMPTS=30
            READY=0
            while [ $ATTEMPTS -gt 0 ]; do
              if grep -q "Started BackendApplication" app.log 2>/dev/null; then
                READY=1; break
              fi
              if ! kill -0 "$APP_PID" 2>/dev/null; then
                echo 'Process exited prematurely:'
                tail -50 app.log || true
                exit 1
              fi
              sleep 1
              ATTEMPTS=$((ATTEMPTS-1))
            done
            if [ $READY -eq 0 ]; then
              echo 'Timeout waiting for startup signature. Showing last 80 log lines.'
              tail -80 app.log || true
              exit 1
            fi
            echo 'Application reported startup success.'
            echo 'Recent log lines:'
            tail -30 app.log || true
            echo '=== Deployment completed successfully ==='
            EOSSH
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Deployment completed on Backend EC2"
            else
              echo "ERROR: Deployment failed on Backend EC2"
              exit 1
            fi
            
            echo "=== Overall deployment process completed ==="
            echo "Finished at: $(date)"
