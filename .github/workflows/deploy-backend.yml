name: Deploy Spring Boot to Backend EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Spring Boot JAR
        run: mvn clean package -DskipTests

      # Step 1: Upload JAR file to Bastion Host
      - name: Upload JAR to Bastion
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/*.jar"
          target: "/home/ec2-user/"

      # Step 2: SSH into Bastion and Copy JAR to Backend EC2, then Restart App
      - name: SSH into Bastion & Deploy to Backend EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.BASTION_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            JAR_NAME=backend-0.0.1-SNAPSHOT.jar
            BACKEND_HOST=10.16.78.89
            REMOTE_HOME=/home/ec2-user
            REMOTE_JAR_PATH="$REMOTE_HOME/$JAR_NAME"
            
            echo "=== Starting deployment process ==="
            echo "Current time: $(date)"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            echo "=== Verifying JAR file exists on Bastion (multi-path search) ==="
            echo "Listing /home/ec2-user:"; ls -lah /home/ec2-user || true
            echo "Listing /home/ec2-user/target:"; ls -lah /home/ec2-user/target || true
            if [ -f "/home/ec2-user/$JAR_NAME" ]; then
              JAR_PATH_ON_BASTION="/home/ec2-user/$JAR_NAME"
            elif [ -f "/home/ec2-user/target/$JAR_NAME" ]; then
              JAR_PATH_ON_BASTION="/home/ec2-user/target/$JAR_NAME"
            else
              echo "Jar not in standard locations, running find..."
              JAR_PATH_ON_BASTION=$(find /home/ec2-user -maxdepth 4 -type f -name "$JAR_NAME" | head -1 || true)
            fi
            if [ -z "$JAR_PATH_ON_BASTION" ] || [ ! -f "$JAR_PATH_ON_BASTION" ]; then
              echo "ERROR: JAR file not found anywhere under /home/ec2-user"
              exit 1
            fi
            echo "SUCCESS: Found JAR at: $JAR_PATH_ON_BASTION"
            
            echo "=== Copying JAR to Backend EC2 ==="
            echo "Source: $JAR_PATH_ON_BASTION"
            echo "Destination: ec2-user@$BACKEND_HOST:$REMOTE_HOME/"
            scp -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem "$JAR_PATH_ON_BASTION" ec2-user@$BACKEND_HOST:"$REMOTE_HOME/"
            if [ $? -eq 0 ]; then
              echo "SUCCESS: JAR file copied to Backend EC2"
            else
              echo "ERROR: Failed to copy JAR file to Backend EC2"
              exit 1
            fi

            echo "=== Creating environment variables on Backend EC2 ==="
            ssh -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem ec2-user@$BACKEND_HOST 'bash -s' <<'EOSSH'
            set -e
            cat > /home/ec2-user/.env <<'EOF'
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            BEDROCK_FLOW_ID=${{ secrets.BEDROCK_FLOW_ID }}
            BEDROCK_FLOW_ALIAS_ID=${{ secrets.BEDROCK_FLOW_ALIAS_ID }}
            BEDROCK_MOCK_ENABLED=${{ secrets.BEDROCK_MOCK_ENABLED }}
            EOF
            chmod 600 /home/ec2-user/.env
            echo 'Environment file created successfully'
            echo 'Verifying .env file line count:'
            wc -l /home/ec2-user/.env
            EOSSH
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Environment variables created on Backend EC2"
            else
              echo "ERROR: Failed to create environment variables on Backend EC2"
              exit 1
            fi

            echo "=== Deploying to Backend EC2 ==="
            ssh -o StrictHostKeyChecking=no -i ~/traderdeck-key.pem ec2-user@$BACKEND_HOST "
              JAR_NAME=$JAR_NAME
              REMOTE_HOME=$REMOTE_HOME
              REMOTE_JAR_PATH=$REMOTE_JAR_PATH
              echo '=== Backend EC2 Deployment Start ==='
              echo 'Current time:' \
              $(date)
              
              echo '=== Stopping existing Spring Boot application ==='
              EXISTING_PID=\$(pgrep -f \"java -jar.*$JAR_NAME\")
              if [ ! -z \"$EXISTING_PID\" ]; then
                echo \"Found existing application with PID: $EXISTING_PID\"
                pkill -f \"java -jar.*$JAR_NAME\" || true
                sleep 3
                REMAINING_PID=\$(pgrep -f \"java -jar.*$JAR_NAME\")
                if [ ! -z \"$REMAINING_PID\" ]; then
                  echo \"WARNING: Application still running with PID: $REMAINING_PID\"
                  pkill -9 -f \"java -jar.*$JAR_NAME\" || true
                  sleep 2
                  echo \"Force killed application\"
                else
                  echo \"SUCCESS: Application stopped gracefully\"
                fi
              else
                echo \"INFO: No existing application found running\"
              fi
              
              echo '=== Loading environment variables ==='
              if [ -f $REMOTE_HOME/.env ]; then
                set -a
                . $REMOTE_HOME/.env
                set +a
              else
                echo 'ERROR: .env file not found!'
                exit 1
              fi

              echo '=== Verifying JAR file on Backend EC2 ==='
              if [ -f \"$REMOTE_JAR_PATH\" ]; then
                echo \"SUCCESS: JAR file found: $REMOTE_JAR_PATH\"
                ls -lah \"$REMOTE_JAR_PATH\"
              else
                echo \"ERROR: JAR file not found at $REMOTE_JAR_PATH\"
                ls -lah $REMOTE_HOME || true
                exit 1
              fi

              echo '=== Starting new deployment ==='
              nohup java -jar \"$REMOTE_JAR_PATH\" > app.log 2>&1 &
              APP_PID=\$!
              echo \"Application started with PID: $APP_PID\"
              sleep 7
              RUNNING_PID=\$(pgrep -f \"java -jar.*$JAR_NAME\")
              if [ -z \"$RUNNING_PID\" ]; then
                echo 'ERROR: Application failed to start.'
                tail -40 app.log || true
                exit 1
              fi
              echo \"SUCCESS: Application running with PID: $RUNNING_PID\"
              tail -20 app.log || true
              echo '=== Deployment completed successfully ==='
            "
            if [ $? -eq 0 ]; then
              echo "SUCCESS: Deployment completed on Backend EC2"
            else
              echo "ERROR: Deployment failed on Backend EC2"
              exit 1
            fi
            
            echo "=== Overall deployment process completed ==="
            echo "Finished at: $(date)"
